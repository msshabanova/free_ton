
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract tasks {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    struct taskList {
        string name;
        uint32 timestamp;
        bool flag;    
    }
    string[] public Array;
    mapping (uint => taskList) public number;

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }
    modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
    function addNewTask (string name, bool flag) public checkOwnerAndAccept {
        uint32 newTimestamp = now;
        taskList myTask = taskList (name, newTimestamp, flag);
        Array.push(name);
        uint key = Array.length;
        number[key].name = name;
        number[key].timestamp = newTimestamp;
        number[key].flag = flag;
    }
    function openTask () public checkOwnerAndAccept returns(uint) {
        uint count;
        for (uint i=1; i<=Array.length; i++ ) {
            if (!number[i].flag){
                count++;
            }
            
        }
        return count;
    }
    function  getTaskList() public checkOwnerAndAccept returns(string[]){
        return Array;
    }
    function  taskDescription(uint8 key) public checkOwnerAndAccept returns(taskList){
        require(key>0 && key<=Array.length);
        taskList myTask = taskList (number[key].name, number[key].timestamp, number[key].flag);
        return myTask;
    }
    function  deleteTask(uint8 key) public checkOwnerAndAccept{
        require(key>0 && key<=Array.length);
        delete number[key].name;
        delete number[key].timestamp;
        delete number[key].flag;
        delete Array[key];
    }
    function  keyTask(uint8 key) public checkOwnerAndAccept{
        require(key>0 && key<=Array.length);
        require(!number[key].flag);
        number[key].flag = true;
    }
}
