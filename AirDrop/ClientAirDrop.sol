
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'InterfaseAirDrop.sol';

// This is class that describes you smart contract.
contract ClientAirDrop {

    address public owner;

    function isInternalOwner(address forCheck) private inline view returns (bool) {
        return owner != address(0) && forCheck == owner;
    }

    modifier checkOwnerAndAccept {
        require(msg.pubkey() == tvm.pubkey() || isInternalOwner(msg.sender), 102);
        tvm.accept();
        _;
    }

    modifier checkOwner {
        require(msg.pubkey() == tvm.pubkey(), 107);
        _;
    }

    
    constructor() public {

    }

    function sendTokensAndArraysToAirDrop (address AirDropAddress, uint256 valueOfTokens, address [] arrayRecieversAddr, uint [] arrayValues) public view checkOwnerAndAccept {
        address clientAddress = address(this);
        uint256 value = valueOfTokens;
        InterfaseAirDrop(AirDropAddress).checkAirDrop(clientAddress, value, arrayRecieversAddr,  arrayValues);
    
        transferTokensForAirDrop (AirDropAddress, valueOfTokens, bounce, flag)
    }

    function transferTokensForAirDrop (address AirDropAddress, uint256 valueOfTokens, bool bounce, uint16 flag) public pure checkOwnerAndAccept {
        AirDropAddress.transfer(valueOfTokens, bounce, flag, TvmCell payload);
    }

}