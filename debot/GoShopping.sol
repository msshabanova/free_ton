
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;
pragma AbiHeader pubkey;
pragma AbiHeader time;
import "AbstractDebotListInit.sol";
import 'ShoppingListSmartContract.sol';
import "ShoppingListStructures.sol";

// This is class that describes you smart contract.
contract GoShopping is AbstractDebotListInit {

    string purchaseName;
    
    function _menu() internal override{
        string sep = '----------------------------------------';
        Menu.select(
            format(
                "You have {}/{} (unpaid/paid) purchases for {} total sum",
                    m_summary.unpaidCount,
                    m_summary.paidCount,
                    m_summary.sum
            ),
            sep,
            [
                MenuItem("Show purchase list","",tvm.functionId(showPurchase)),
                MenuItem("Delete task","",tvm.functionId(deletePurchase)),
                MenuItem("Add new purchase","",tvm.functionId(buyToKnowPurchesNumber))
            ]
        );
    }

    function showPurchase(uint32 index) public view {
        index = index;
        optional(uint256) none;
        ShoppingListInterface(m_address).getPurchase{
            abiVer: 2,
            extMsg: true,
            sign: false,
            pubkey: none,
            time: uint64(now),
            expire: 0,
            callbackId: tvm.functionId(showPurchase_),
            onErrorId: 0
        }();
    }

    function showPurchase_( Purchase [] purchaseArray ) public {
        uint32 i;
        if (purchaseArray.length > 0 ) {
            Terminal.print(0, "Your purchase list:");
            for (i = 0; i < purchaseArray.length; i++) {
                Purchase purchase = purchaseArray[i];
                string bought;
                if (purchase.isBought) {
                    bought = 'âœ“';
                } else {
                    bought = ' ';
                }
                Terminal.print(0, format("{} {}  {}{}  at {}", purchase.id, bought, purchase.number, purchase.name, purchase.createdAt));
            }
        } else {
            Terminal.print(0, "Your purchase list is empty");
        }
        _menu();
    }

    function deletePurchase(uint32 index) public {
        index = index;
        if (m_summary.paidCount + m_summary.unpaidCount > 0) {
            Terminal.input(tvm.functionId(deletePurchase_), "Enter purchase number:", false);
        } else {
            Terminal.print(0, "Sorry, you have no purchases to delete");
            _menu();
        }
    }

    function deletePurchase_(string value) public view {
        (uint256 num,) = stoi(value);
        optional(uint256) pubkey = 0;
        ShoppingListInterface(m_address).deletePurchase{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(uint32(num));
    }

    function buyToKnowPurchesNumber (uint32 index) public {
        index = index;
        if (m_summary.paidCount + m_summary.unpaidCount > 0) {
            Terminal.input(tvm.functionId(buyToKnowPurchesNumber_), "Enter purchase number:", false);
        } else {
            Terminal.print(0, "Sorry, you have no purchases to buy");
            _menu();
        }
    }

    function buyToKnowPurchesNumber_(string value) public {
        (uint256 num,) = stoi(value);
        m_purchaseId = uint32(num);
        ConfirmInput.get(tvm.functionId(buyToKnowPrice),"Is this purchase yuo want to buy?");
    }

    function buyToKnowPrice(bool value) public {
        if (value){
            Terminal.input(tvm.functionId(buy_), "Enter purchase price:", false);
        }
            _menu();
    }

    function buy_ (string price) public view {
        (uint256 purchasePRice,)= stoi(price);
        uint64 purchasePrice = uint64(purchasePRice);
        optional(uint256) pubkey = 0;
        ShoppingListInterface(m_address).buy{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(m_purchaseId, purchasePrice);
    }

    function setStat(SummaryOfShopping summary) public override {
        m_summary = summary;
        _menu();
    }
   

}
